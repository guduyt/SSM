<?xml version="1.0" encoding="UTF-8"?>
<configuration >
    <jmxConfigurator />
    <property name="log_path" value="D:/Java/logs" />
    <property name="log_name" value="web_log" />
    <property name="log_level" value="INFO"/>
    <property name="log_level_other" value="DEBUG"/>

    <contextName>${log_name}</contextName>


    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <Target>System.err</Target>
        <encoder>
            <pattern>%date [%level] [%thread] %logger{50}[%file :%line]   %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件压缩(.zip)备份)-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${log_path}/web_log.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log_path}/web_log/%d{yyyy-MM}/web_log_%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10240KB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.PatternLayout">
                <pattern>%date [%level] [%thread] %logger{36}[%file :%line]   %msg%n</pattern>
            </layout>
        </encoder>
    </appender>

    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level> <!-- 指定要对级别为ERROR日志信息过滤 -->
            <onMismatch>DENY</onMismatch>     <!-- 如果不匹配，则拒绝处理 -->
            <onMatch>ACCEPT</onMatch>         <!-- 如果匹配，则立即处理 -->
        </filter>
        <file>${log_path}/error_log.log</file> <!-- 文件名即路径 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log_path}/error_log/%d{yyyy-MM}/error_log_%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1024KB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.PatternLayout">
                <pattern>%date [%level] [%thread] %logger{36}[%file :%line]   %msg%n</pattern>
            </layout>
        </encoder>
    </appender>

    <appender name="my_log" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level> <!-- 指定要对级别为ERROR日志信息过滤 -->
            <onMismatch>DENY</onMismatch>     <!-- 如果不匹配，则拒绝处理 -->
            <onMatch>ACCEPT</onMatch>         <!-- 如果匹配，则立即处理 -->
        </filter>
        <file>${log_path}/my_web.log</file> <!-- 文件名即路径 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log_path}/my_web/%d{yyyy-MM}/my_web_%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1024KB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.PatternLayout">
                <pattern>%date [%level] [%thread] %logger{36}[%file :%line]   %msg%n</pattern>
            </layout>
        </encoder>
    </appender>


        <logger name="java.sql.PreparedStatement" value="${log_level_other}" />
        <logger name="java.sql.Connection" value="${log_level_other}" />
        <logger name="java.sql.Statement" value="${log_level_other}" />
        <logger name="com.entity" value="${log_level_other}" />
        <logger name="com.ibatis"  value="${log_level_other}" ></logger>
        <logger name="com.ibatis.common.jdbc.SimpleDataSource"  value="${log_level_other}" ></logger>
        <logger name="com.ibatis.common.jdbc.ScriptRunner"  value="${log_level_other}" ></logger>
        <logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate"  value="${log_level_other}" ></logger>

    <root level="${log_level}">
        <appender-ref ref="console"/>
       <appender-ref ref="file"/>
        <!-- <appender-ref ref="error"/>-->
    </root>
</configuration>